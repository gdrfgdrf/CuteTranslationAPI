import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id 'signing'
	id 'io.github.jeadyx.sonatype-uploader' version '2.7'
	id "org.jetbrains.kotlin.jvm" version "2.0.0"
	id 'com.google.protobuf' version '0.9.4'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

configurations {
	compileJar
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
	compileJar 'com.fasterxml.jackson.core:jackson-core:2.17.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
	compileJar 'com.fasterxml.jackson.core:jackson-databind:2.17.1'

	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'

	implementation 'com.google.protobuf:protobuf-java:4.27.2'
	compileJar 'com.google.protobuf:protobuf-java:4.27.2'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 8
}

tasks.withType(KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 1.8
	}
}

tasks.withType(Javadoc).all { enabled = false }

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from { configurations.compileJar.collect { it.isDirectory() ? it : zipTree(it) } }
}

sonatypeUploader {
	repositoryPath = "H:\\.m2\\repository"
	tokenName = nexusUser
	tokenPasswd = nexusPassword

	signing {
		keyId = mykeyId
		keyPasswd = myPassword
		secretKeyPath = mySecretKeyRingFile
	}

//	pom = {
//		name = "CuteTranslationAPI"
//		description = "Allows the player to choose the language of the mod as needed, it also allows the mod to retrieve language strings based on the player's settings"
//		url = "https://github.com/gdrfgdrf/CuteTranslationAPI"
//		licenses {
//			license {
//				name = "The Apache License, Version 2.0"
//				url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
//			}
//		}
//		developers {
//			developer {
//				name = "gdrfgdrf"
//				email = "gdrfgdrfgdrfgdrfgdrfgdrf@hotmail.com"
//			}
//		}
//		scm {
//			url = "https://github.com/gdrfgdrf/CuteTranslationAPI"
//			connection = "scm:git:https://github.com/gdrfgdrf/CuteTranslationAPI.git"
//			developerConnection = "scm:git:https://github.com/gdrfgdrf/CuteTranslationAPI.git"
//		}
//	}

}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
//			groupId "io.github.gdrfgdrf.cutetranslationapi"
//			artifactId "cutetranslationapi"
//			version project.version
			from components.java

			pom {
				name = "cute-translation-api"
				description = "Allows the player to choose the language of the mod as needed, it also allows the mod to retrieve language strings based on the player's settings"
				url = "https://github.com/gdrfgdrf/CuteTranslationAPI"
				licenses {
					license {
						name = "The Apache License, Version 2.0"
						url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
					}
				}
				developers {
					developer {
						name = "gdrfgdrf"
						email = "gdrfgdrfgdrfgdrfgdrfgdrf@hotmail.com"
					}
				}
				scm {
					url = "https://github.com/gdrfgdrf/CuteTranslationAPI"
					connection = "scm:git:https://github.com/gdrfgdrf/CuteTranslationAPI.git"
					developerConnection = "scm:git:https://github.com/gdrfgdrf/CuteTranslationAPI.git"
				}
			}
		}
	}

	repositories {
		mavenLocal()
	}
}

signing {
	sign publishing.publications.mavenJava
}

sourceSets {
	main {
		proto {
			srcDir 'src/main/proto'
		}
	}
}

protobuf {
	protoc {
		path = 'H:\\Protobuf\\bin\\protoc.exe'
	}
}

tasks.withType(Copy).all {
	duplicatesStrategy 'exclude'
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
//	archiveClassifier "sources"
}